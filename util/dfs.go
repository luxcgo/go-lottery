package util

import (
	"fmt"
	"sort"
	"strings"
)

func generate() {
	dfs(0, 10)
	// for i := 1; i <= 126; i++ {
	// 	// fmt.Println(permutation[i])
	// 	s := strings.Join(strings.Fields(fmt.Sprint(permutation[i])), " ")
	// 	fmt.Printf("          <option value=\"%d\">%03d %s</option>\n", i, i, s)
	// }

	for i := 1; i <= 126; i++ {
		fmt.Printf("%d: {%s},\n", i, strings.Trim(strings.Join(strings.Fields(fmt.Sprint(permutation[i])), " ,"), "[]"))
	}
	fmt.Println(len(permutation))
}

const N = 20

var (
	idx         int
	path        = make([]int, 20)
	st          [N]bool
	permutation = make(map[int][]int)
	exist       = make(map[string]bool)
	nums        = []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
	//                     1        4     6     8  9
	p = map[int][]int{
		1:   {0, 1, 2, 3, 4, 5, 6, 7, 8, 9},
		2:   {0, 1, 2, 3, 5, 4, 6, 7, 8, 9},
		3:   {0, 1, 2, 3, 6, 4, 5, 7, 8, 9},
		4:   {0, 1, 2, 3, 7, 4, 5, 6, 8, 9},
		5:   {0, 1, 2, 3, 8, 4, 5, 6, 7, 9},
		6:   {0, 1, 2, 3, 9, 4, 5, 6, 7, 8},
		7:   {0, 1, 2, 4, 5, 3, 6, 7, 8, 9},
		8:   {0, 1, 2, 4, 6, 3, 5, 7, 8, 9},
		9:   {0, 1, 2, 4, 7, 3, 5, 6, 8, 9},
		10:  {0, 1, 2, 4, 8, 3, 5, 6, 7, 9},
		11:  {0, 1, 2, 4, 9, 3, 5, 6, 7, 8},
		12:  {0, 1, 2, 5, 6, 3, 4, 7, 8, 9},
		13:  {0, 1, 2, 5, 7, 3, 4, 6, 8, 9},
		14:  {0, 1, 2, 5, 8, 3, 4, 6, 7, 9},
		15:  {0, 1, 2, 5, 9, 3, 4, 6, 7, 8},
		16:  {0, 1, 2, 6, 7, 3, 4, 5, 8, 9},
		17:  {0, 1, 2, 6, 8, 3, 4, 5, 7, 9},
		18:  {0, 1, 2, 6, 9, 3, 4, 5, 7, 8},
		19:  {0, 1, 2, 7, 8, 3, 4, 5, 6, 9},
		20:  {0, 1, 2, 7, 9, 3, 4, 5, 6, 8},
		21:  {0, 1, 2, 8, 9, 3, 4, 5, 6, 7},
		22:  {0, 1, 3, 4, 5, 2, 6, 7, 8, 9},
		23:  {0, 1, 3, 4, 6, 2, 5, 7, 8, 9},
		24:  {0, 1, 3, 4, 7, 2, 5, 6, 8, 9},
		25:  {0, 1, 3, 4, 8, 2, 5, 6, 7, 9},
		26:  {0, 1, 3, 4, 9, 2, 5, 6, 7, 8},
		27:  {0, 1, 3, 5, 6, 2, 4, 7, 8, 9},
		28:  {0, 1, 3, 5, 7, 2, 4, 6, 8, 9},
		29:  {0, 1, 3, 5, 8, 2, 4, 6, 7, 9},
		30:  {0, 1, 3, 5, 9, 2, 4, 6, 7, 8},
		31:  {0, 1, 3, 6, 7, 2, 4, 5, 8, 9},
		32:  {0, 1, 3, 6, 8, 2, 4, 5, 7, 9},
		33:  {0, 1, 3, 6, 9, 2, 4, 5, 7, 8},
		34:  {0, 1, 3, 7, 8, 2, 4, 5, 6, 9},
		35:  {0, 1, 3, 7, 9, 2, 4, 5, 6, 8},
		36:  {0, 1, 3, 8, 9, 2, 4, 5, 6, 7},
		37:  {0, 1, 4, 5, 6, 2, 3, 7, 8, 9},
		38:  {0, 1, 4, 5, 7, 2, 3, 6, 8, 9},
		39:  {0, 1, 4, 5, 8, 2, 3, 6, 7, 9},
		40:  {0, 1, 4, 5, 9, 2, 3, 6, 7, 8},
		41:  {0, 1, 4, 6, 7, 2, 3, 5, 8, 9},
		42:  {0, 1, 4, 6, 8, 2, 3, 5, 7, 9},
		43:  {0, 1, 4, 6, 9, 2, 3, 5, 7, 8},
		44:  {0, 1, 4, 7, 8, 2, 3, 5, 6, 9},
		45:  {0, 1, 4, 7, 9, 2, 3, 5, 6, 8},
		46:  {0, 1, 4, 8, 9, 2, 3, 5, 6, 7},
		47:  {0, 1, 5, 6, 7, 2, 3, 4, 8, 9},
		48:  {0, 1, 5, 6, 8, 2, 3, 4, 7, 9},
		49:  {0, 1, 5, 6, 9, 2, 3, 4, 7, 8},
		50:  {0, 1, 5, 7, 8, 2, 3, 4, 6, 9},
		51:  {0, 1, 5, 7, 9, 2, 3, 4, 6, 8},
		52:  {0, 1, 5, 8, 9, 2, 3, 4, 6, 7},
		53:  {0, 1, 6, 7, 8, 2, 3, 4, 5, 9},
		54:  {0, 1, 6, 7, 9, 2, 3, 4, 5, 8},
		55:  {0, 1, 6, 8, 9, 2, 3, 4, 5, 7},
		56:  {0, 1, 7, 8, 9, 2, 3, 4, 5, 6},
		57:  {0, 2, 3, 4, 5, 1, 6, 7, 8, 9},
		58:  {0, 2, 3, 4, 6, 1, 5, 7, 8, 9},
		59:  {0, 2, 3, 4, 7, 1, 5, 6, 8, 9},
		60:  {0, 2, 3, 4, 8, 1, 5, 6, 7, 9},
		61:  {0, 2, 3, 4, 9, 1, 5, 6, 7, 8},
		62:  {0, 2, 3, 5, 6, 1, 4, 7, 8, 9},
		63:  {0, 2, 3, 5, 7, 1, 4, 6, 8, 9},
		64:  {0, 2, 3, 5, 8, 1, 4, 6, 7, 9},
		65:  {0, 2, 3, 5, 9, 1, 4, 6, 7, 8},
		66:  {0, 2, 3, 6, 7, 1, 4, 5, 8, 9},
		67:  {0, 2, 3, 6, 8, 1, 4, 5, 7, 9},
		68:  {0, 2, 3, 6, 9, 1, 4, 5, 7, 8},
		69:  {0, 2, 3, 7, 8, 1, 4, 5, 6, 9},
		70:  {0, 2, 3, 7, 9, 1, 4, 5, 6, 8},
		71:  {0, 2, 3, 8, 9, 1, 4, 5, 6, 7},
		72:  {0, 2, 4, 5, 6, 1, 3, 7, 8, 9},
		73:  {0, 2, 4, 5, 7, 1, 3, 6, 8, 9},
		74:  {0, 2, 4, 5, 8, 1, 3, 6, 7, 9},
		75:  {0, 2, 4, 5, 9, 1, 3, 6, 7, 8},
		76:  {0, 2, 4, 6, 7, 1, 3, 5, 8, 9},
		77:  {0, 2, 4, 6, 8, 1, 3, 5, 7, 9},
		78:  {0, 2, 4, 6, 9, 1, 3, 5, 7, 8},
		79:  {0, 2, 4, 7, 8, 1, 3, 5, 6, 9},
		80:  {0, 2, 4, 7, 9, 1, 3, 5, 6, 8},
		81:  {0, 2, 4, 8, 9, 1, 3, 5, 6, 7},
		82:  {0, 2, 5, 6, 7, 1, 3, 4, 8, 9},
		83:  {0, 2, 5, 6, 8, 1, 3, 4, 7, 9},
		84:  {0, 2, 5, 6, 9, 1, 3, 4, 7, 8},
		85:  {0, 2, 5, 7, 8, 1, 3, 4, 6, 9},
		86:  {0, 2, 5, 7, 9, 1, 3, 4, 6, 8},
		87:  {0, 2, 5, 8, 9, 1, 3, 4, 6, 7},
		88:  {0, 2, 6, 7, 8, 1, 3, 4, 5, 9},
		89:  {0, 2, 6, 7, 9, 1, 3, 4, 5, 8},
		90:  {0, 2, 6, 8, 9, 1, 3, 4, 5, 7},
		91:  {0, 2, 7, 8, 9, 1, 3, 4, 5, 6},
		92:  {0, 3, 4, 5, 6, 1, 2, 7, 8, 9},
		93:  {0, 3, 4, 5, 7, 1, 2, 6, 8, 9},
		94:  {0, 3, 4, 5, 8, 1, 2, 6, 7, 9},
		95:  {0, 3, 4, 5, 9, 1, 2, 6, 7, 8},
		96:  {0, 3, 4, 6, 7, 1, 2, 5, 8, 9},
		97:  {0, 3, 4, 6, 8, 1, 2, 5, 7, 9},
		98:  {0, 3, 4, 6, 9, 1, 2, 5, 7, 8},
		99:  {0, 3, 4, 7, 8, 1, 2, 5, 6, 9},
		100: {0, 3, 4, 7, 9, 1, 2, 5, 6, 8},
		101: {0, 3, 4, 8, 9, 1, 2, 5, 6, 7},
		102: {0, 3, 5, 6, 7, 1, 2, 4, 8, 9},
		103: {0, 3, 5, 6, 8, 1, 2, 4, 7, 9},
		104: {0, 3, 5, 6, 9, 1, 2, 4, 7, 8},
		105: {0, 3, 5, 7, 8, 1, 2, 4, 6, 9},
		106: {0, 3, 5, 7, 9, 1, 2, 4, 6, 8},
		107: {0, 3, 5, 8, 9, 1, 2, 4, 6, 7},
		108: {0, 3, 6, 7, 8, 1, 2, 4, 5, 9},
		109: {0, 3, 6, 7, 9, 1, 2, 4, 5, 8},
		110: {0, 3, 6, 8, 9, 1, 2, 4, 5, 7},
		111: {0, 3, 7, 8, 9, 1, 2, 4, 5, 6},
		112: {0, 4, 5, 6, 7, 1, 2, 3, 8, 9},
		113: {0, 4, 5, 6, 8, 1, 2, 3, 7, 9},
		114: {0, 4, 5, 6, 9, 1, 2, 3, 7, 8},
		115: {0, 4, 5, 7, 8, 1, 2, 3, 6, 9},
		116: {0, 4, 5, 7, 9, 1, 2, 3, 6, 8},
		117: {0, 4, 5, 8, 9, 1, 2, 3, 6, 7},
		118: {0, 4, 6, 7, 8, 1, 2, 3, 5, 9},
		119: {0, 4, 6, 7, 9, 1, 2, 3, 5, 8},
		120: {0, 4, 6, 8, 9, 1, 2, 3, 5, 7},
		121: {0, 4, 7, 8, 9, 1, 2, 3, 5, 6},
		122: {0, 5, 6, 7, 8, 1, 2, 3, 4, 9},
		123: {0, 5, 6, 7, 9, 1, 2, 3, 4, 8},
		124: {0, 5, 6, 8, 9, 1, 2, 3, 4, 7},
		125: {0, 5, 7, 8, 9, 1, 2, 3, 4, 6},
		126: {0, 6, 7, 8, 9, 1, 2, 3, 4, 5},
	}
)

func dfs(u, n int) {
	if u == n {
		// fmt.Println(path)
		firstHalf := make([]int, 5)
		for i := 0; i < 5; i++ {
			firstHalf[i] = path[i]
		}
		// copy(path[0:5], firstHalf)
		sort.Ints(firstHalf)
		// fmt.Println(firstHalf)

		secondHalf := make([]int, 0, 5)
		for i, j := 0, 0; i < len(nums); {
			if j == 5 {
				secondHalf = append(secondHalf, nums[i:]...)
				break
			}
			if nums[i] < firstHalf[j] {
				secondHalf = append(secondHalf, nums[i])
				i++
			} else {
				i++
				j++
			}
		}

		// fmt.Println(firstHalf)
		// fmt.Println(secondHalf)
		key1 := strings.Trim(strings.Join(strings.Fields(fmt.Sprint(firstHalf[0:5])), ""), "[]")
		key2 := strings.Trim(strings.Join(strings.Fields(fmt.Sprint(secondHalf[0:5])), ""), "[]")
		// fmt.Println(key1)
		// fmt.Println(key2)
		if !exist[key1] || !exist[key2] {
			exist[key1] = true
			exist[key2] = true
			idx++
			res := append(firstHalf, secondHalf...)
			permutation[idx] = res
		}
		return
	}

	for i := 0; i < n; i++ {
		if !st[i] {
			path[u] = i
			st[i] = true
			dfs(u+1, n)
			st[i] = false
		}
	}
}

// 4 2 3 5 7

// 6 1 4 5 7
